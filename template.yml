AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Serverless Fargate

Parameters:
  ApplicationName:
    Type: String
    Default: 'Serverless Fargate'
  ProjectName:
    Type: String
    Default: "golang-alpine"
  VpcId:
    Type: AWS::EC2::VPC::Id
    Default: 'vpc-0'
  ProtectedSubnetId:
    Type: String
    Default: 'subnet-0'
  AllowEcsPolicy:
    Type: List<String>
    Default: 's3:List*,s3:Get*,s3:Put*'
  TaskCpu:
    AllowedValues: [ 256, 512, 1024, 2048, 4096  ]
    Type: Number
    Default: 256
  TaskMemory:
    AllowedValues: [ 256, 512, 1024, 2048, 4096  ]
    Type: Number
    Default: 512
  TaskCount:
    Type: Number
    Default: 1

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ProjectName
      GroupName: !Ref ProjectName
      GroupDescription: Security group for the service
      VpcId: !Ref VpcId

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SecurityGroup

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ProjectName

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}

  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      RoleName: !Sub ${ProjectName}-task-execution-role

  EcsTaskExecutionRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-task-execution-role-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetLifecyclePolicyPreview
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:DescribeImages
              - ecr:ListTagsForResource
              - ecr:BatchCheckLayerAvailability
              - ecr:GetLifecyclePolicy
              - ecr:GetRepositoryPolicy
            Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*"
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ssm:GetParameters
              - secretsmanager:GetSecretValue
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
      Roles:
        - Ref: EcsTaskExecutionRole

  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole
      RoleName: !Sub ${ProjectName}-task-role

  EcsTaskRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-task-role-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: !Ref AllowEcsPolicy
            Resource: '*'
      Roles:
        - Ref: EcsTaskRole

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ProjectName
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - Name: app
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}
          EntryPoint:
            - 'sh'
            - '-c'
          Environment:
            - Name: TZ
              Value: Asia/Tokyo
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: app
          Essential: true

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Ref ProjectName
      State: ENABLED
      ScheduleExpression: cron(0 9 * * ? *)
      Targets:
        - Id: !Ref ProjectName
          Arn: !GetAtt Cluster.Arn
          RoleArn: !GetAtt EcsTaskExecutionRole.Arn
          EcsParameters:
            TaskDefinitionArn: !Ref TaskDefinition
            TaskCount: !Ref TaskCount
            LaunchType: FARGATE
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: DISABLED
                SecurityGroups:
                  - !Ref SecurityGroup
                Subnets:
                  - !Ref ProtectedSubnetId
          Input: !Join [
            '',
            [
              "{",
              "   \"containerOverrides\": [ ",
              "     {",
              "       \"name\": \"app\", ",
              "       \"command\": [\"go run main.go\"]",
              "     }",
              "   ]",
              "}",
            ]
          ]

Outputs:
  ProjectName:
    Description: "ProjectName"
    Value: !Ref ProjectName
